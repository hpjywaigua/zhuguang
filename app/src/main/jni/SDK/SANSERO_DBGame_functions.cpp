// Pubg Mobile Battelgrounds (2.9.0) SDK Generated By @hhamk2 
// ùöÉùöéùöïùöéùöêùöõùöäùöñ -: @SANSERO_MOD_1
#include "../SDK.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function DBGame.BackpackComponentDBZ.ServerExchangeItemPos
// ()
// Parameters:
// struct FItemDefineID           DefineID1                      (ConstParm, Parm, ReferenceParm)
// struct FItemDefineID           DefineID2                      (ConstParm, Parm, ReferenceParm)

void UBackpackComponentDBZ::ServerExchangeItemPos(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.ServerExchangeItemPos");

	UBackpackComponentDBZ_ServerExchangeItemPos_Params params;
	params.DefineID1 = DefineID1;
	params.DefineID2 = DefineID2;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.ReceiveItemListDBZ
// ()

void UBackpackComponentDBZ::ReceiveItemListDBZ()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.ReceiveItemListDBZ");

	UBackpackComponentDBZ_ReceiveItemListDBZ_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.OnRep_ItemListNetDBZ
// ()

void UBackpackComponentDBZ::OnRep_ItemListNetDBZ()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.OnRep_ItemListNetDBZ");

	UBackpackComponentDBZ_OnRep_ItemListNetDBZ_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.NotifyItemUpdated
// ()
// Parameters:
// struct FItemDefineID           DefineID                       (ConstParm, Parm, OutParm, ReferenceParm)

void UBackpackComponentDBZ::NotifyItemUpdated(const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.NotifyItemUpdated");

	UBackpackComponentDBZ_NotifyItemUpdated_Params params;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.NotifyItemRemoved
// ()
// Parameters:
// struct FItemDefineID           DefineID                       (ConstParm, Parm, OutParm, ReferenceParm)

void UBackpackComponentDBZ::NotifyItemRemoved(const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.NotifyItemRemoved");

	UBackpackComponentDBZ_NotifyItemRemoved_Params params;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.NotifyItemListUpdated
// ()

void UBackpackComponentDBZ::NotifyItemListUpdated()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.NotifyItemListUpdated");

	UBackpackComponentDBZ_NotifyItemListUpdated_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackComponentDBZ.GetWeaponAttachType
// ()
// Parameters:
// int                            weaponattachID                 (Parm, ZeroConstructor, IsPlainOldData)
// EWeaponAttachmentSocketType    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EWeaponAttachmentSocketType UBackpackComponentDBZ::GetWeaponAttachType(int weaponattachID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.GetWeaponAttachType");

	UBackpackComponentDBZ_GetWeaponAttachType_Params params;
	params.weaponattachID = weaponattachID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackComponentDBZ.GetWeaponAttachSameType
// ()
// Parameters:
// int                            weaponattachID1                (Parm, ZeroConstructor, IsPlainOldData)
// int                            weaponattachID2                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UBackpackComponentDBZ::GetWeaponAttachSameType(int weaponattachID1, int weaponattachID2)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.GetWeaponAttachSameType");

	UBackpackComponentDBZ_GetWeaponAttachSameType_Params params;
	params.weaponattachID1 = weaponattachID1;
	params.weaponattachID2 = weaponattachID2;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackComponentDBZ.GetSameTypeSupperWeaponAttachNum
// ()
// Parameters:
// int                            weaponattachID                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UBackpackComponentDBZ::GetSameTypeSupperWeaponAttachNum(int weaponattachID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackComponentDBZ.GetSameTypeSupperWeaponAttachNum");

	UBackpackComponentDBZ_GetSameTypeSupperWeaponAttachNum_Params params;
	params.weaponattachID = weaponattachID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZEquiptHandle.HandlePickup
// ()
// Parameters:
// TScriptInterface<class UItemContainerInterface> ItemContainer                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FBattleItemPickupInfo   PickupInfo                     (Parm)
// EBattleItemPickupReason        Reason                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UBackpackDBZEquiptHandle::HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZEquiptHandle.HandlePickup");

	UBackpackDBZEquiptHandle_HandlePickup_Params params;
	params.ItemContainer = ItemContainer;
	params.PickupInfo = PickupInfo;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZUtils.UnRegisterInvokeClass
// ()

void UBackpackDBZUtils::UnRegisterInvokeClass()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.UnRegisterInvokeClass");

	UBackpackDBZUtils_UnRegisterInvokeClass_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackDBZUtils.SetIsNeedInitTable
// ()
// Parameters:
// bool                           IsNeedInit                     (Parm, ZeroConstructor, IsPlainOldData)

void UBackpackDBZUtils::SetIsNeedInitTable(bool IsNeedInit)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.SetIsNeedInitTable");

	UBackpackDBZUtils_SetIsNeedInitTable_Params params;
	params.IsNeedInit = IsNeedInit;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackDBZUtils.RegisterInvokeClass
// ()

void UBackpackDBZUtils::RegisterInvokeClass()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.RegisterInvokeClass");

	UBackpackDBZUtils_RegisterInvokeClass_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackDBZUtils.RealGetBPUtils
// ()
// Parameters:
// class UBackpackBlueprintDBZUtils* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UBackpackBlueprintDBZUtils* UBackpackDBZUtils::RealGetBPUtils()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.RealGetBPUtils");

	UBackpackDBZUtils_RealGetBPUtils_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZUtils.PickupFromGround
// ()
// Parameters:
// class UBackpackComponent*      BackpackComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class APickUpWrapperActor*     Source                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FBattleItemUseTarget    AutoEquipTarget                (Parm)
// bool                           bForceAutoEquip                (Parm, ZeroConstructor, IsPlainOldData)
// int                            pickCount                      (Parm, ZeroConstructor, IsPlainOldData)
// EBattleItemClientPickupType    BattleItemClientPickupType     (Parm, ZeroConstructor, IsPlainOldData)

void UBackpackDBZUtils::PickupFromGround(class UBackpackComponent* BackpackComp, class APickUpWrapperActor* Source, const struct FBattleItemUseTarget& AutoEquipTarget, bool bForceAutoEquip, int pickCount, EBattleItemClientPickupType BattleItemClientPickupType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.PickupFromGround");

	UBackpackDBZUtils_PickupFromGround_Params params;
	params.BackpackComp = BackpackComp;
	params.Source = Source;
	params.AutoEquipTarget = AutoEquipTarget;
	params.bForceAutoEquip = bForceAutoEquip;
	params.pickCount = pickCount;
	params.BattleItemClientPickupType = BattleItemClientPickupType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.BackpackDBZUtils.GetWeaponAttachHightLevelId
// ()
// Parameters:
// class UBackpackComponent*      BackpackComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            attach1                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            attach2                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UBackpackDBZUtils::GetWeaponAttachHightLevelId(class UBackpackComponent* BackpackComp, int attach1, int attach2)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.GetWeaponAttachHightLevelId");

	UBackpackDBZUtils_GetWeaponAttachHightLevelId_Params params;
	params.BackpackComp = BackpackComp;
	params.attach1 = attach1;
	params.attach2 = attach2;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZUtils.GetDBZEquipmentType
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UBackpackDBZUtils::GetDBZEquipmentType()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.GetDBZEquipmentType");

	UBackpackDBZUtils_GetDBZEquipmentType_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZUtils.GetAvatarRealDefineID
// ()
// Parameters:
// struct FItemDefineID           DefineID                       (Parm)
// struct FItemDefineID           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FItemDefineID UBackpackDBZUtils::GetAvatarRealDefineID(const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZUtils.GetAvatarRealDefineID");

	UBackpackDBZUtils_GetAvatarRealDefineID_Params params;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.BackpackDBZWeaponAttachHandle.HandlePickup
// ()
// Parameters:
// TScriptInterface<class UItemContainerInterface> ItemContainer                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FBattleItemPickupInfo   PickupInfo                     (Parm)
// EBattleItemPickupReason        Reason                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UBackpackDBZWeaponAttachHandle::HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.BackpackDBZWeaponAttachHandle.HandlePickup");

	UBackpackDBZWeaponAttachHandle_HandlePickup_Params params;
	params.ItemContainer = ItemContainer;
	params.PickupInfo = PickupInfo;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.CustomSpringArmDBZComponent.StopCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediately                   (Parm, ZeroConstructor, IsPlainOldData)

void UCustomSpringArmDBZComponent::StopCameraShake(class UClass* Shake, bool bImmediately)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.CustomSpringArmDBZComponent.StopCameraShake");

	UCustomSpringArmDBZComponent_StopCameraShake_Params params;
	params.Shake = Shake;
	params.bImmediately = bImmediately;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.CustomSpringArmDBZComponent.SetFireCameraData
// ()
// Parameters:
// struct FVector                 socket                         (Parm, IsPlainOldData)
// struct FVector                 Target                         (Parm, IsPlainOldData)
// float                          SpringArm                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdditiveFov                    (Parm, ZeroConstructor, IsPlainOldData)

void UCustomSpringArmDBZComponent::SetFireCameraData(const struct FVector& socket, const struct FVector& Target, float SpringArm, float AdditiveFov)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.CustomSpringArmDBZComponent.SetFireCameraData");

	UCustomSpringArmDBZComponent_SetFireCameraData_Params params;
	params.socket = socket;
	params.Target = Target;
	params.SpringArm = SpringArm;
	params.AdditiveFov = AdditiveFov;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.CustomSpringArmDBZComponent.SetDBZCameraDataEnable
// ()
// Parameters:
// TEnumAsByte<EDBZCameraDataType> CameraDataType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsEnable                       (Parm, ZeroConstructor, IsPlainOldData)

void UCustomSpringArmDBZComponent::SetDBZCameraDataEnable(TEnumAsByte<EDBZCameraDataType> CameraDataType, bool IsEnable)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.CustomSpringArmDBZComponent.SetDBZCameraDataEnable");

	UCustomSpringArmDBZComponent_SetDBZCameraDataEnable_Params params;
	params.CameraDataType = CameraDataType;
	params.IsEnable = IsEnable;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.CustomSpringArmDBZComponent.PlayCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void UCustomSpringArmDBZComponent::PlayCameraShake(class UClass* Shake, float Scale)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.CustomSpringArmDBZComponent.PlayCameraShake");

	UCustomSpringArmDBZComponent_PlayCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.CustomSpringArmDBZComponent.HasActiveDBZCameraOffsetData
// ()
// Parameters:
// TEnumAsByte<EDBZCameraDataType> InDataType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCustomSpringArmDBZComponent::HasActiveDBZCameraOffsetData(TEnumAsByte<EDBZCameraDataType> InDataType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.CustomSpringArmDBZComponent.HasActiveDBZCameraOffsetData");

	UCustomSpringArmDBZComponent_HasActiveDBZCameraOffsetData_Params params;
	params.InDataType = InDataType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZCharacterEffectComponent.UpdateCharacterParticleEffect
// ()

void UDBZCharacterEffectComponent::UpdateCharacterParticleEffect()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZCharacterEffectComponent.UpdateCharacterParticleEffect");

	UDBZCharacterEffectComponent_UpdateCharacterParticleEffect_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZCharacterEffectComponent.RefreshCharacterParticleEffects
// ()
// Parameters:
// int                            HeroID                         (Parm, ZeroConstructor, IsPlainOldData)

void UDBZCharacterEffectComponent::RefreshCharacterParticleEffects(int HeroID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZCharacterEffectComponent.RefreshCharacterParticleEffects");

	UDBZCharacterEffectComponent_RefreshCharacterParticleEffects_Params params;
	params.HeroID = HeroID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZCharacterEffectComponent.CheckCharacterCanPlayEffect
// ()
// Parameters:
// struct FCharacterParticleEffect Effect                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDBZCharacterEffectComponent::CheckCharacterCanPlayEffect(struct FCharacterParticleEffect* Effect)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZCharacterEffectComponent.CheckCharacterCanPlayEffect");

	UDBZCharacterEffectComponent_CheckCharacterCanPlayEffect_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Effect != nullptr)
		*Effect = params.Effect;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.VerifyStartLocation
// ()

void ADBZProjectileBase::VerifyStartLocation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.VerifyStartLocation");

	ADBZProjectileBase_VerifyStartLocation_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.UpdateServerProjectileData
// ()

void ADBZProjectileBase::UpdateServerProjectileData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.UpdateServerProjectileData");

	ADBZProjectileBase_UpdateServerProjectileData_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.UpdateFollowVelocity
// ()
// Parameters:
// float                          InDeltaTime                    (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::UpdateFollowVelocity(float InDeltaTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.UpdateFollowVelocity");

	ADBZProjectileBase_UpdateFollowVelocity_Params params;
	params.InDeltaTime = InDeltaTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.StartFly
// ()
// Parameters:
// struct FVector                 StartLocation                  (Parm, IsPlainOldData)
// struct FVector                 InVelocity                     (Parm, IsPlainOldData)
// float                          InGravityScale                 (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::StartFly(const struct FVector& StartLocation, const struct FVector& InVelocity, float InGravityScale)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.StartFly");

	ADBZProjectileBase_StartFly_Params params;
	params.StartLocation = StartLocation;
	params.InVelocity = InVelocity;
	params.InGravityScale = InGravityScale;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.SetTargetActor
// ()
// Parameters:
// class AActor*                  InTargetActor                  (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::SetTargetActor(class AActor* InTargetActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.SetTargetActor");

	ADBZProjectileBase_SetTargetActor_Params params;
	params.InTargetActor = InTargetActor;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.RPC_Multicast_OnImpact
// ()
// Parameters:
// struct FVector                 InImpactLocation               (ConstParm, Parm, ReferenceParm, IsPlainOldData)
// EDBZDestroyType                InDestroyType                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          inScale                        (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::RPC_Multicast_OnImpact(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.RPC_Multicast_OnImpact");

	ADBZProjectileBase_RPC_Multicast_OnImpact_Params params;
	params.InImpactLocation = InImpactLocation;
	params.InDestroyType = InDestroyType;
	params.inScale = inScale;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.RandomRotateFlyDirection
// ()
// Parameters:
// struct FVector                 InOriginalDir                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InMinRadY                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMaxRadY                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMinRadZ                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMaxRadZ                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ADBZProjectileBase::RandomRotateFlyDirection(const struct FVector& InOriginalDir, float InMinRadY, float InMaxRadY, float InMinRadZ, float InMaxRadZ)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.RandomRotateFlyDirection");

	ADBZProjectileBase_RandomRotateFlyDirection_Params params;
	params.InOriginalDir = InOriginalDir;
	params.InMinRadY = InMinRadY;
	params.InMaxRadY = InMaxRadY;
	params.InMinRadZ = InMinRadZ;
	params.InMaxRadZ = InMaxRadZ;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.PreHandleImpactOnClient
// ()
// Parameters:
// struct FHitResult              InImpactResult                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ADBZProjectileBase::PreHandleImpactOnClient(const struct FHitResult& InImpactResult)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.PreHandleImpactOnClient");

	ADBZProjectileBase_PreHandleImpactOnClient_Params params;
	params.InImpactResult = InImpactResult;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnStartFly
// ()

void ADBZProjectileBase::OnStartFly()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnStartFly");

	ADBZProjectileBase_OnStartFly_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnRep_TargetActorLocation
// ()

void ADBZProjectileBase::OnRep_TargetActorLocation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnRep_TargetActorLocation");

	ADBZProjectileBase_OnRep_TargetActorLocation_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnRep_TargetActor
// ()

void ADBZProjectileBase::OnRep_TargetActor()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnRep_TargetActor");

	ADBZProjectileBase_OnRep_TargetActor_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnRep_DynamicScaleData
// ()

void ADBZProjectileBase::OnRep_DynamicScaleData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnRep_DynamicScaleData");

	ADBZProjectileBase_OnRep_DynamicScaleData_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnProjectileExplodedOutOfTime
// ()

void ADBZProjectileBase::OnProjectileExplodedOutOfTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnProjectileExplodedOutOfTime");

	ADBZProjectileBase_OnProjectileExplodedOutOfTime_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnProjectileDestroy
// ()

void ADBZProjectileBase::OnProjectileDestroy()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnProjectileDestroy");

	ADBZProjectileBase_OnProjectileDestroy_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnInit
// ()

void ADBZProjectileBase::OnInit()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnInit");

	ADBZProjectileBase_OnInit_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.OnImpact
// ()
// Parameters:
// struct FHitResult              InImpactResult                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ADBZProjectileBase::OnImpact(const struct FHitResult& InImpactResult)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.OnImpact");

	ADBZProjectileBase_OnImpact_Params params;
	params.InImpactResult = InImpactResult;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.HandleRespawned
// ()

void ADBZProjectileBase::HandleRespawned()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.HandleRespawned");

	ADBZProjectileBase_HandleRespawned_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.HandleRecycled
// ()

void ADBZProjectileBase::HandleRecycled()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.HandleRecycled");

	ADBZProjectileBase_HandleRecycled_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.HandleImpactOnServer
// ()
// Parameters:
// struct FHitResult              InImpactResult                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// EDBZDestroyType                InDestroyType                  (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::HandleImpactOnServer(const struct FHitResult& InImpactResult, EDBZDestroyType InDestroyType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.HandleImpactOnServer");

	ADBZProjectileBase_HandleImpactOnServer_Params params;
	params.InImpactResult = InImpactResult;
	params.InDestroyType = InDestroyType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.HandleImpactOnClient
// ()
// Parameters:
// struct FVector                 InImpactLocation               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// EDBZDestroyType                InDestroyType                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          inScale                        (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::HandleImpactOnClient(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.HandleImpactOnClient");

	ADBZProjectileBase_HandleImpactOnClient_Params params;
	params.InImpactLocation = InImpactLocation;
	params.InDestroyType = InDestroyType;
	params.inScale = inScale;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.HandleApplyDamage
// ()
// Parameters:
// struct FHitResult              InImpactResult                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 InHitPoint                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// EDBZDestroyType                InDestroyType                  (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::HandleApplyDamage(const struct FHitResult& InImpactResult, const struct FVector& InHitPoint, EDBZDestroyType InDestroyType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.HandleApplyDamage");

	ADBZProjectileBase_HandleApplyDamage_Params params;
	params.InImpactResult = InImpactResult;
	params.InHitPoint = InHitPoint;
	params.InDestroyType = InDestroyType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.GetWeakNetAdjustStrength
// ()
// Parameters:
// float                          InPing                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADBZProjectileBase::GetWeakNetAdjustStrength(float InPing)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetWeakNetAdjustStrength");

	ADBZProjectileBase_GetWeakNetAdjustStrength_Params params;
	params.InPing = InPing;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.GetTheNearestActor
// ()
// Parameters:
// TArray<class AActor*>          InActorList                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* ADBZProjectileBase::GetTheNearestActor(TArray<class AActor*> InActorList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetTheNearestActor");

	ADBZProjectileBase_GetTheNearestActor_Params params;
	params.InActorList = InActorList;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.GetTargetActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* ADBZProjectileBase::GetTargetActor()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetTargetActor");

	ADBZProjectileBase_GetTargetActor_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.GetStartVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ADBZProjectileBase::GetStartVelocity()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetStartVelocity");

	ADBZProjectileBase_GetStartVelocity_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.GetOwnerShootWeapon
// ()
// Parameters:
// class ASTExtraShootWeapon*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraShootWeapon* ADBZProjectileBase::GetOwnerShootWeapon()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetOwnerShootWeapon");

	ADBZProjectileBase_GetOwnerShootWeapon_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.GetFlyRotationCoefficient
// ()
// Parameters:
// float                          InDistance                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADBZProjectileBase::GetFlyRotationCoefficient(float InDistance)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.GetFlyRotationCoefficient");

	ADBZProjectileBase_GetFlyRotationCoefficient_Params params;
	params.InDistance = InDistance;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.FixRotateFlyDirection
// ()
// Parameters:
// struct FVector                 InOriginalDir                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InThetaX                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InThetaY                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ADBZProjectileBase::FixRotateFlyDirection(const struct FVector& InOriginalDir, float InThetaX, float InThetaY)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.FixRotateFlyDirection");

	ADBZProjectileBase_FixRotateFlyDirection_Params params;
	params.InOriginalDir = InOriginalDir;
	params.InThetaX = InThetaX;
	params.InThetaY = InThetaY;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.DetectFollowTarget
// ()
// Parameters:
// float                          InDeltaTime                    (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::DetectFollowTarget(float InDeltaTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.DetectFollowTarget");

	ADBZProjectileBase_DetectFollowTarget_Params params;
	params.InDeltaTime = InDeltaTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.CheckIsOutOfRange
// ()
// Parameters:
// struct FVector                 InCheckLoc                     (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADBZProjectileBase::CheckIsOutOfRange(const struct FVector& InCheckLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.CheckIsOutOfRange");

	ADBZProjectileBase_CheckIsOutOfRange_Params params;
	params.InCheckLoc = InCheckLoc;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.CheckImpactInLastTrack
// ()
// Parameters:
// struct FVector                 InTraceStartLoc                (Parm, IsPlainOldData)
// struct FVector                 InTraceEndLoc                  (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADBZProjectileBase::CheckImpactInLastTrack(const struct FVector& InTraceStartLoc, const struct FVector& InTraceEndLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.CheckImpactInLastTrack");

	ADBZProjectileBase_CheckImpactInLastTrack_Params params;
	params.InTraceStartLoc = InTraceStartLoc;
	params.InTraceEndLoc = InTraceEndLoc;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZProjectileBase.CauseDamageToActor
// ()
// Parameters:
// class AActor*                  ImpactActor                    (Parm, ZeroConstructor, IsPlainOldData)

void ADBZProjectileBase::CauseDamageToActor(class AActor* ImpactActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.CauseDamageToActor");

	ADBZProjectileBase_CauseDamageToActor_Params params;
	params.ImpactActor = ImpactActor;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.BPOnStartFly
// ()

void ADBZProjectileBase::BPOnStartFly()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.BPOnStartFly");

	ADBZProjectileBase_BPOnStartFly_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.BPDealDamage
// ()

void ADBZProjectileBase::BPDealDamage()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.BPDealDamage");

	ADBZProjectileBase_BPDealDamage_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZProjectileBase.AdjustStartVelocity
// ()

void ADBZProjectileBase::AdjustStartVelocity()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZProjectileBase.AdjustStartVelocity");

	ADBZProjectileBase_AdjustStartVelocity_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.TickStateModifyAttr
// ()

void ADBZShootWeapon::TickStateModifyAttr()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.TickStateModifyAttr");

	ADBZShootWeapon_TickStateModifyAttr_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.TickDrawDotCrossHairData
// ()

void ADBZShootWeapon::TickDrawDotCrossHairData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.TickDrawDotCrossHairData");

	ADBZShootWeapon_TickDrawDotCrossHairData_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.TickAimEffect
// ()

void ADBZShootWeapon::TickAimEffect()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.TickAimEffect");

	ADBZShootWeapon_TickAimEffect_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.SetIsEnableScopeInFromEntity
// ()
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void ADBZShootWeapon::SetIsEnableScopeInFromEntity(bool Enable)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.SetIsEnableScopeInFromEntity");

	ADBZShootWeapon_SetIsEnableScopeInFromEntity_Params params;
	params.Enable = Enable;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.RefreshAimEffectActiveTime
// ()

void ADBZShootWeapon::RefreshAimEffectActiveTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.RefreshAimEffectActiveTime");

	ADBZShootWeapon_RefreshAimEffectActiveTime_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.RealShootBulletWithoutParam
// ()

void ADBZShootWeapon::RealShootBulletWithoutParam()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.RealShootBulletWithoutParam");

	ADBZShootWeapon_RealShootBulletWithoutParam_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.RealShootBullet
// ()
// Parameters:
// struct FVector                 StartLoc                       (Parm, IsPlainOldData)
// struct FRotator                StartRot                       (Parm, IsPlainOldData)

void ADBZShootWeapon::RealShootBullet(const struct FVector& StartLoc, const struct FRotator& StartRot)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.RealShootBullet");

	ADBZShootWeapon_RealShootBullet_Params params;
	params.StartLoc = StartLoc;
	params.StartRot = StartRot;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.OnRep_RecentCameraInfo
// ()

void ADBZShootWeapon::OnRep_RecentCameraInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.OnRep_RecentCameraInfo");

	ADBZShootWeapon_OnRep_RecentCameraInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.OnRep_IsAimEffectValid
// ()

void ADBZShootWeapon::OnRep_IsAimEffectValid()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.OnRep_IsAimEffectValid");

	ADBZShootWeapon_OnRep_IsAimEffectValid_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.NotifyServerRecentCameraInfo
// ()
// Parameters:
// struct FWeaponCameraInfo       CameraInfo                     (ConstParm, Parm, ReferenceParm)

void ADBZShootWeapon::NotifyServerRecentCameraInfo(const struct FWeaponCameraInfo& CameraInfo)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.NotifyServerRecentCameraInfo");

	ADBZShootWeapon_NotifyServerRecentCameraInfo_Params params;
	params.CameraInfo = CameraInfo;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.IsNeedUploadCameraInfo
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADBZShootWeapon::IsNeedUploadCameraInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.IsNeedUploadCameraInfo");

	ADBZShootWeapon_IsNeedUploadCameraInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZShootWeapon.InserNextBurstShootInterval
// ()
// Parameters:
// float                          interval                       (Parm, ZeroConstructor, IsPlainOldData)

void ADBZShootWeapon::InserNextBurstShootInterval(float interval)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.InserNextBurstShootInterval");

	ADBZShootWeapon_InserNextBurstShootInterval_Params params;
	params.interval = interval;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.HandleOnRepRecentCameraInfo
// ()

void ADBZShootWeapon::HandleOnRepRecentCameraInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.HandleOnRepRecentCameraInfo");

	ADBZShootWeapon_HandleOnRepRecentCameraInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.GetNearestAimTarget
// ()
// Parameters:
// class ASTExtraBaseCharacter*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraBaseCharacter* ADBZShootWeapon::GetNearestAimTarget()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.GetNearestAimTarget");

	ADBZShootWeapon_GetNearestAimTarget_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZShootWeapon.GetAimingCharacter
// ()
// Parameters:
// class ASTExtraBaseCharacter*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraBaseCharacter* ADBZShootWeapon::GetAimingCharacter()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.GetAimingCharacter");

	ADBZShootWeapon_GetAimingCharacter_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.DBZShootWeapon.ExitDrawDotCrossHairData
// ()

void ADBZShootWeapon::ExitDrawDotCrossHairData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.ExitDrawDotCrossHairData");

	ADBZShootWeapon_ExitDrawDotCrossHairData_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.EnterDrawDotCrossHairData
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ADBZShootWeapon::EnterDrawDotCrossHairData(float DeltaTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.EnterDrawDotCrossHairData");

	ADBZShootWeapon_EnterDrawDotCrossHairData_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.CurBulletChangeBroadcast
// ()

void ADBZShootWeapon::CurBulletChangeBroadcast()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.CurBulletChangeBroadcast");

	ADBZShootWeapon_CurBulletChangeBroadcast_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.ConditionChangeCrossHairColor
// ()

void ADBZShootWeapon::ConditionChangeCrossHairColor()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.ConditionChangeCrossHairColor");

	ADBZShootWeapon_ConditionChangeCrossHairColor_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.DBZShootWeapon.AddAimEffectActiveTime
// ()
// Parameters:
// float                          ExtraTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ADBZShootWeapon::AddAimEffectActiveTime(float ExtraTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.DBZShootWeapon.AddAimEffectActiveTime");

	ADBZShootWeapon_AddAimEffectActiveTime_Params params;
	params.ExtraTime = ExtraTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PlummetGuideActor.PendingDestroy
// ()

void APlummetGuideActor::PendingDestroy()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PlummetGuideActor.PendingDestroy");

	APlummetGuideActor_PendingDestroy_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PlummetGuideActor.CreateNewDecalComponent
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          InSize                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InExistsTime                   (Parm, ZeroConstructor, IsPlainOldData)
// class UCustomDecalComponent*   ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UCustomDecalComponent* APlummetGuideActor::CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PlummetGuideActor.CreateNewDecalComponent");

	APlummetGuideActor_CreateNewDecalComponent_Params params;
	params.InName = InName;
	params.InSize = InSize;
	params.InMaterial = InMaterial;
	params.InExistsTime = InExistsTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PlummetWarningActor.CreateNewDecalComponent
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          InSize                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InExistsTime                   (Parm, ZeroConstructor, IsPlainOldData)
// class UCustomDecalComponent*   ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UCustomDecalComponent* APlummetWarningActor::CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PlummetWarningActor.CreateNewDecalComponent");

	APlummetWarningActor_CreateNewDecalComponent_Params params;
	params.InName = InName;
	params.InSize = InSize;
	params.InMaterial = InMaterial;
	params.InExistsTime = InExistsTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileFollow.SetStartLocationForwardOffset
// ()
// Parameters:
// struct FVector                 StartLocationForwardOffsetWorld (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void APVEProjectileFollow::SetStartLocationForwardOffset(const struct FVector& StartLocationForwardOffsetWorld)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileFollow.SetStartLocationForwardOffset");

	APVEProjectileFollow_SetStartLocationForwardOffset_Params params;
	params.StartLocationForwardOffsetWorld = StartLocationForwardOffsetWorld;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileFollow.RPC_Server_UpdateLocationOffset
// ()
// Parameters:
// struct FVector_NetQuantize10   LocationOffset                 (Parm)

void APVEProjectileFollow::RPC_Server_UpdateLocationOffset(const struct FVector_NetQuantize10& LocationOffset)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileFollow.RPC_Server_UpdateLocationOffset");

	APVEProjectileFollow_RPC_Server_UpdateLocationOffset_Params params;
	params.LocationOffset = LocationOffset;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileFollow.OnRep_LocationCorrected
// ()

void APVEProjectileFollow::OnRep_LocationCorrected()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileFollow.OnRep_LocationCorrected");

	APVEProjectileFollow_OnRep_LocationCorrected_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileRay.ResetHitData
// ()

void APVEProjectileRay::ResetHitData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.ResetHitData");

	APVEProjectileRay_ResetHitData_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileRay.OnRadiusScaleDeltaChanged
// ()

void APVEProjectileRay::OnRadiusScaleDeltaChanged()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.OnRadiusScaleDeltaChanged");

	APVEProjectileRay_OnRadiusScaleDeltaChanged_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileRay.OnEffectURLChanged
// ()

void APVEProjectileRay::OnEffectURLChanged()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.OnEffectURLChanged");

	APVEProjectileRay_OnEffectURLChanged_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.PVEProjectileRay.GetOwnerShootWeapon
// ()
// Parameters:
// class ASTExtraShootWeapon*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraShootWeapon* APVEProjectileRay::GetOwnerShootWeapon()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.GetOwnerShootWeapon");

	APVEProjectileRay_GetOwnerShootWeapon_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileRay.GetElaspedTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APVEProjectileRay::GetElaspedTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.GetElaspedTime");

	APVEProjectileRay_GetElaspedTime_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileRay.GetDisplayRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APVEProjectileRay::GetDisplayRadius()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.GetDisplayRadius");

	APVEProjectileRay_GetDisplayRadius_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileRay.GetDamage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APVEProjectileRay::GetDamage()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.GetDamage");

	APVEProjectileRay_GetDamage_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileRay.GetAvgRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APVEProjectileRay::GetAvgRadius()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRay.GetAvgRadius");

	APVEProjectileRay_GetAvgRadius_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.PVEProjectileRaysManager.GetRays
// ()
// Parameters:
// TEnumAsByte<ENetRole>          InRole                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APVEProjectileRay*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APVEProjectileRay*> APVEProjectileRaysManager::GetRays(TEnumAsByte<ENetRole> InRole)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.PVEProjectileRaysManager.GetRays");

	APVEProjectileRaysManager_GetRays_Params params;
	params.InRole = InRole;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STBuffAction_RenderCustomDecal.OnTick
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void USTBuffAction_RenderCustomDecal::OnTick(float DeltaTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_RenderCustomDecal.OnTick");

	USTBuffAction_RenderCustomDecal_OnTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_RenderCustomDecal.OnExecute
// ()

void USTBuffAction_RenderCustomDecal::OnExecute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_RenderCustomDecal.OnExecute");

	USTBuffAction_RenderCustomDecal_OnExecute_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_RenderCustomDecal.OnEnd
// ()

void USTBuffAction_RenderCustomDecal::OnEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_RenderCustomDecal.OnEnd");

	USTBuffAction_RenderCustomDecal_OnEnd_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_RenderCustomDecal.CreateNewDecalComponent
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          InSize                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InExistsTime                   (Parm, ZeroConstructor, IsPlainOldData)
// class UCustomDecalComponent*   ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UCustomDecalComponent* USTBuffAction_RenderCustomDecal::CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_RenderCustomDecal.CreateNewDecalComponent");

	USTBuffAction_RenderCustomDecal_CreateNewDecalComponent_Params params;
	params.InName = InName;
	params.InSize = InSize;
	params.InMaterial = InMaterial;
	params.InExistsTime = InExistsTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STBuffAction_ReplaceJumpAnim.OnExecute
// ()

void USTBuffAction_ReplaceJumpAnim::OnExecute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_ReplaceJumpAnim.OnExecute");

	USTBuffAction_ReplaceJumpAnim_OnExecute_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_ReplaceJumpAnim.OnEnd
// ()

void USTBuffAction_ReplaceJumpAnim::OnEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_ReplaceJumpAnim.OnEnd");

	USTBuffAction_ReplaceJumpAnim_OnEnd_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_SetCharacterFallingMovement.OnTick
// ()
// Parameters:
// float                          DetalTime                      (Parm, ZeroConstructor, IsPlainOldData)

void USTBuffAction_SetCharacterFallingMovement::OnTick(float DetalTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_SetCharacterFallingMovement.OnTick");

	USTBuffAction_SetCharacterFallingMovement_OnTick_Params params;
	params.DetalTime = DetalTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_SetCharacterFallingMovement.OnExecute
// ()

void USTBuffAction_SetCharacterFallingMovement::OnExecute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_SetCharacterFallingMovement.OnExecute");

	USTBuffAction_SetCharacterFallingMovement_OnExecute_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_SetCharacterFallingMovement.OnEnd
// ()

void USTBuffAction_SetCharacterFallingMovement::OnEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_SetCharacterFallingMovement.OnEnd");

	USTBuffAction_SetCharacterFallingMovement_OnEnd_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STBuffAction_SetCharacterFallingMovement.OnDestroy
// ()

void USTBuffAction_SetCharacterFallingMovement::OnDestroy()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STBuffAction_SetCharacterFallingMovement.OnDestroy");

	USTBuffAction_SetCharacterFallingMovement_OnDestroy_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.UpdateParam
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void USTExtraDBZAnimInstance::UpdateParam(float DeltaSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.UpdateParam");

	USTExtraDBZAnimInstance_UpdateParam_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.UpdateHeadOverlapped
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void USTExtraDBZAnimInstance::UpdateHeadOverlapped(float DeltaSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.UpdateHeadOverlapped");

	USTExtraDBZAnimInstance_UpdateHeadOverlapped_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.UpdateAttackType
// ()

void USTExtraDBZAnimInstance::UpdateAttackType()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.UpdateAttackType");

	USTExtraDBZAnimInstance_UpdateAttackType_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.UpdateAnimCurve
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void USTExtraDBZAnimInstance::UpdateAnimCurve(float DeltaSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.UpdateAnimCurve");

	USTExtraDBZAnimInstance_UpdateAnimCurve_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.UpdateAimOffset
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void USTExtraDBZAnimInstance::UpdateAimOffset(float DeltaSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.UpdateAimOffset");

	USTExtraDBZAnimInstance_UpdateAimOffset_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.RefreshHeroSpecifiedParam
// ()
// Parameters:
// int                            HeroID                         (Parm, ZeroConstructor, IsPlainOldData)

void USTExtraDBZAnimInstance::RefreshHeroSpecifiedParam(int HeroID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.RefreshHeroSpecifiedParam");

	USTExtraDBZAnimInstance_RefreshHeroSpecifiedParam_Params params;
	params.HeroID = HeroID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.PlayPlayerDeadAnimation
// ()

void USTExtraDBZAnimInstance::PlayPlayerDeadAnimation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.PlayPlayerDeadAnimation");

	USTExtraDBZAnimInstance_PlayPlayerDeadAnimation_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.OnExitLanding
// ()

void USTExtraDBZAnimInstance::OnExitLanding()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.OnExitLanding");

	USTExtraDBZAnimInstance_OnExitLanding_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZAnimInstance.LuaInitializeAnimation
// ()

void USTExtraDBZAnimInstance::LuaInitializeAnimation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZAnimInstance.LuaInitializeAnimation");

	USTExtraDBZAnimInstance_LuaInitializeAnimation_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.UpdateGunADSHiddenPawn
// ()

void ASTExtraDBZCharacter::UpdateGunADSHiddenPawn()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.UpdateGunADSHiddenPawn");

	ASTExtraDBZCharacter_UpdateGunADSHiddenPawn_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.ResetCharacter
// ()

void ASTExtraDBZCharacter::ResetCharacter()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.ResetCharacter");

	ASTExtraDBZCharacter_ResetCharacter_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.RefreshHeroSpecifiedParam
// ()
// Parameters:
// int                            NewHeroID                      (Parm, ZeroConstructor, IsPlainOldData)

void ASTExtraDBZCharacter::RefreshHeroSpecifiedParam(int NewHeroID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.RefreshHeroSpecifiedParam");

	ASTExtraDBZCharacter_RefreshHeroSpecifiedParam_Params params;
	params.NewHeroID = NewHeroID;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.MarkAttackFlag
// ()
// Parameters:
// bool                           Flag                           (Parm, ZeroConstructor, IsPlainOldData)

void ASTExtraDBZCharacter::MarkAttackFlag(bool Flag)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.MarkAttackFlag");

	ASTExtraDBZCharacter_MarkAttackFlag_Params params;
	params.Flag = Flag;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.GetShouldHardLanding
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASTExtraDBZCharacter::GetShouldHardLanding()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetShouldHardLanding");

	ASTExtraDBZCharacter_GetShouldHardLanding_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.GetOneBarrierFreeEnemyInRange
// ()
// Parameters:
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// class ASTExtraPlayerCharacter* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraPlayerCharacter* ASTExtraDBZCharacter::GetOneBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetOneBarrierFreeEnemyInRange");

	ASTExtraDBZCharacter_GetOneBarrierFreeEnemyInRange_Params params;
	params.MaxDistance = MaxDistance;
	params.MaxAngle = MaxAngle;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.GetMarkAttackFlag
// ()
// Parameters:
// float                          RecentTime                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASTExtraDBZCharacter::GetMarkAttackFlag(float RecentTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetMarkAttackFlag");

	ASTExtraDBZCharacter_GetMarkAttackFlag_Params params;
	params.RecentTime = RecentTime;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.GetEnemyInRange
// ()
// Parameters:
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FAimTargetInfo>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FAimTargetInfo> ASTExtraDBZCharacter::GetEnemyInRange(float MaxDistance, float MaxAngle)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetEnemyInRange");

	ASTExtraDBZCharacter_GetEnemyInRange_Params params;
	params.MaxDistance = MaxDistance;
	params.MaxAngle = MaxAngle;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.GetDBZDamageScale
// ()
// Parameters:
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ASTExtraDBZCharacter::GetDBZDamageScale(class AActor* DamageCauser)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetDBZDamageScale");

	ASTExtraDBZCharacter_GetDBZDamageScale_Params params;
	params.DamageCauser = DamageCauser;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.GetBarrierFreeEnemyInRange
// ()
// Parameters:
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Num                            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class ASTExtraPlayerCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class ASTExtraPlayerCharacter*> ASTExtraDBZCharacter::GetBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle, int Num)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.GetBarrierFreeEnemyInRange");

	ASTExtraDBZCharacter_GetBarrierFreeEnemyInRange_Params params;
	params.MaxDistance = MaxDistance;
	params.MaxAngle = MaxAngle;
	params.Num = Num;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function DBGame.STExtraDBZCharacter.BroadcastClientsSimulateEquipmentDamageInfo
// ()
// Parameters:
// class ASTExtraBaseCharacter*   DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          FinalDamage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          EquipentReduce                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           brokenEquipment                (Parm, ZeroConstructor, IsPlainOldData)

void ASTExtraDBZCharacter::BroadcastClientsSimulateEquipmentDamageInfo(class ASTExtraBaseCharacter* DamageCauser, float FinalDamage, float EquipentReduce, bool brokenEquipment)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.BroadcastClientsSimulateEquipmentDamageInfo");

	ASTExtraDBZCharacter_BroadcastClientsSimulateEquipmentDamageInfo_Params params;
	params.DamageCauser = DamageCauser;
	params.FinalDamage = FinalDamage;
	params.EquipentReduce = EquipentReduce;
	params.brokenEquipment = brokenEquipment;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.STExtraDBZCharacter.AddWeaponGeneralCount
// ()
// Parameters:
// int                            WeaponId                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 GenraString                    (Parm, ZeroConstructor)
// float                          GeneralValue                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Reset                          (Parm, ZeroConstructor, IsPlainOldData)

void ASTExtraDBZCharacter::AddWeaponGeneralCount(int WeaponId, const struct FString& GenraString, float GeneralValue, bool Reset)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.STExtraDBZCharacter.AddWeaponGeneralCount");

	ASTExtraDBZCharacter_AddWeaponGeneralCount_Params params;
	params.WeaponId = WeaponId;
	params.GenraString = GenraString;
	params.GeneralValue = GeneralValue;
	params.Reset = Reset;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.UAESkillAction_CharacterRushForward.HandleOnActorHit
// ()
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UUAESkillAction_CharacterRushForward::HandleOnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.UAESkillAction_CharacterRushForward.HandleOnActorHit");

	UUAESkillAction_CharacterRushForward_HandleOnActorHit_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function DBGame.UTSkillAppearance_ParticleSystemDBZ.GetPlayRateScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UUTSkillAppearance_ParticleSystemDBZ::GetPlayRateScale()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function DBGame.UTSkillAppearance_ParticleSystemDBZ.GetPlayRateScale");

	UUTSkillAppearance_ParticleSystemDBZ_GetPlayRateScale_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


}

