#pragma once

// Pubg Mobile Battelgrounds (2.9.0) SDK Generated By @hhamk2 
// ùöÉùöéùöïùöéùöêùöõùöäùöñ -: @SANSERO_MOD_1
namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class DBGame.BackpackComponentDBZ
// 0x0070 (0x0570 - 0x0500)
class UBackpackComponentDBZ : public UBackpackComponent
{
public:
	struct FIncNetArrayDBZ                             ItemListNetDBZ;                                           // 0x0500(0x0020) (Net)
	struct FIncNetArrayDBZ                             ItemListNetDBZCache;                                      // 0x0520(0x0020)
	struct FScriptMulticastDelegate                    ItemListOrderUpdatedDelegate;                             // 0x0540(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FItemDefineID>                       BroadcastOrderChangeItemList;                             // 0x0550(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0560(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackComponentDBZ");
		return pStaticClass;
	}


	void ServerExchangeItemPos(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	void ReceiveItemListDBZ();
	void OnRep_ItemListNetDBZ();
	void NotifyItemUpdated(const struct FItemDefineID& DefineID);
	void NotifyItemRemoved(const struct FItemDefineID& DefineID);
	void NotifyItemListUpdated();
	EWeaponAttachmentSocketType GetWeaponAttachType(int weaponattachID);
	bool GetWeaponAttachSameType(int weaponattachID1, int weaponattachID2);
	int GetSameTypeSupperWeaponAttachNum(int weaponattachID);
};


// Class DBGame.BackpackDBZEquiptHandle
// 0x0008 (0x0148 - 0x0140)
class UBackpackDBZEquiptHandle : public UBattleItemHandleBase
{
public:
	class UBackpackComponent*                          OwnerBackpackComp;                                        // 0x0140(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZEquiptHandle");
		return pStaticClass;
	}


	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
};


// Class DBGame.BackpackDBZUtils
// 0x0000 (0x0028 - 0x0028)
class UBackpackDBZUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZUtils");
		return pStaticClass;
	}


	void UnRegisterInvokeClass();
	void SetIsNeedInitTable(bool IsNeedInit);
	void RegisterInvokeClass();
	class UBackpackBlueprintDBZUtils* RealGetBPUtils();
	void PickupFromGround(class UBackpackComponent* BackpackComp, class APickUpWrapperActor* Source, const struct FBattleItemUseTarget& AutoEquipTarget, bool bForceAutoEquip, int pickCount, EBattleItemClientPickupType BattleItemClientPickupType);
	int GetWeaponAttachHightLevelId(class UBackpackComponent* BackpackComp, int attach1, int attach2);
	int GetDBZEquipmentType();
	struct FItemDefineID GetAvatarRealDefineID(const struct FItemDefineID& DefineID);
};


// Class DBGame.BackpackBlueprintDBZUtils
// 0x0008 (0x0C88 - 0x0C80)
class UBackpackBlueprintDBZUtils : public UBackpackBlueprintUtils
{
public:
	int                                                DBZEquipmentType;                                         // 0x0C80(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C84(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackBlueprintDBZUtils");
		return pStaticClass;
	}

};


// Class DBGame.BackpackDBZWeaponAttachHandle
// 0x0008 (0x0148 - 0x0140)
class UBackpackDBZWeaponAttachHandle : public UBattleItemHandleBase
{
public:
	class UBackpackComponent*                          OwnerBackpackComp;                                        // 0x0140(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.BackpackDBZWeaponAttachHandle");
		return pStaticClass;
	}


	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
};


// Class DBGame.CustomSpringArmDBZComponent
// 0x0150 (0x0C40 - 0x0AF0)
class UCustomSpringArmDBZComponent : public UCustomSpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0AF0(0x0020) MISSED OFFSET
	struct FCameraOffsetData                           DBZAimCameraData;                                         // 0x0B10(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZFlyCameraData;                                         // 0x0B3C(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZSaveCameraData;                                        // 0x0B68(0x002C) (Edit, BlueprintVisible)
	struct FCameraOffsetData                           DBZFireCameraData;                                        // 0x0B94(0x002C)
	bool                                               bEnablePitchArmLenthModify;                               // 0x0BC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0BC1(0x0007) MISSED OFFSET
	TArray<EPawnState>                                 DisablePawnStates;                                        // 0x0BC8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              PitchAngleToUp;                                           // 0x0BD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTargetArmLength;                                       // 0x0BDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArmLengthChangePerAnge;                                   // 0x0BE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0BE4(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<EDBZCameraDataType>, bool>        CurActiveDBZDataMap;                                      // 0x0BE8(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0C38(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.CustomSpringArmDBZComponent");
		return pStaticClass;
	}


	void StopCameraShake(class UClass* Shake, bool bImmediately);
	void SetFireCameraData(const struct FVector& socket, const struct FVector& Target, float SpringArm, float AdditiveFov);
	void SetDBZCameraDataEnable(TEnumAsByte<EDBZCameraDataType> CameraDataType, bool IsEnable);
	void PlayCameraShake(class UClass* Shake, float Scale);
	bool HasActiveDBZCameraOffsetData(TEnumAsByte<EDBZCameraDataType> InDataType);
};


// Class DBGame.DBZCharacterEffectComponent
// 0x0030 (0x0208 - 0x01D8)
class UDBZCharacterEffectComponent : public ULuaActorComponent
{
public:
	TArray<struct FCharacterParticleEffect>            CharacterEffectsSetting;                                  // 0x01D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     DebugStringOffset;                                        // 0x01E8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       OwnerCharacter;                                           // 0x01F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0200(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZCharacterEffectComponent");
		return pStaticClass;
	}


	void UpdateCharacterParticleEffect();
	void RefreshCharacterParticleEffects(int HeroID);
	bool CheckCharacterCanPlayEffect(struct FCharacterParticleEffect* Effect);
};


// Class DBGame.DBZPlayerGunCollosionComp
// 0x0018 (0x01F0 - 0x01D8)
class UDBZPlayerGunCollosionComp : public UPlayerGunCollosionComp
{
public:
	struct FVector                                     PreCollisionStartPoint;                                   // 0x01D8(0x000C) (IsPlainOldData)
	struct FVector                                     PreCollisionHitPoint;                                     // 0x01E4(0x000C) (IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZPlayerGunCollosionComp");
		return pStaticClass;
	}

};


// Class DBGame.DBZProjectileBase
// 0x03A0 (0x0798 - 0x03F8)
class ADBZProjectileBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x03F8(0x00A8) MISSED OFFSET
	class UPVEProjectileMovementComponent*             PMComp;                                                   // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bFirstFrameAlign;                                         // 0x04A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04A9(0x0003) MISSED OFFSET
	float                                              MaxLifeSpan;                                              // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bServerAlreadyExploded;                                   // 0x04B0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bClientAlreadyRespawn;                                    // 0x04B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              bAlreadyHitInnerObject;                                   // 0x04B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InnerRadius;                                              // 0x04BC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRadiusExplode;                                     // 0x04C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04C1(0x0003) MISSED OFFSET
	float                                              DamageInnerRadius;                                        // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageOuterRadius;                                        // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x04D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DelayFlyTime;                                             // 0x04D4(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsRay;                                                   // 0x04D8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bNeedCheckMaxDistance;                                    // 0x04D9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04DA(0x0002) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x04DC(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsHoming;                                                // 0x04E0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRandomStartVelocity;                                   // 0x04E1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x04E2(0x0002) MISSED OFFSET
	float                                              MinConeHalfAngleRadY;                                     // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadY;                                     // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinConeHalfAngleRadZ;                                     // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadZ;                                     // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFixStartVelocity;                                        // 0x04F4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x04F5(0x0003) MISSED OFFSET
	float                                              FixOffsetY;                                               // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FixOffsetZ;                                               // 0x04FC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeed;                                    // 0x0500(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeedMaxScale;                            // 0x0504(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RadSpeedMinLimit;                                         // 0x0508(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RadSpeedMaxLimit;                                         // 0x050C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HomingEscapeDistance;                                     // 0x0510(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bHomingAllDirection;                                      // 0x0514(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0515(0x0003) MISSED OFFSET
	float                                              HomingAllDirectionRadius;                                 // 0x0518(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletOriginalScale;                                      // 0x051C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAttrEnergyScale;                                    // 0x0520(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAttrRangeScale;                                     // 0x0524(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              FinalBulletScale;                                         // 0x0528(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentDynamicScale;                                      // 0x052C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FDynamicScaleData                           DynamicScaleData;                                         // 0x0530(0x0008) (Net)
	bool                                               bHasBeenThrowedOut;                                       // 0x0538(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0539(0x0007) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x0540(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     InitLocation;                                             // 0x0548(0x000C) (Net, IsPlainOldData)
	struct FVector                                     StartVelocity;                                            // 0x0554(0x000C) (IsPlainOldData)
	float                                              PreHitFrameRate;                                          // 0x0560(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bExplodedAtActorLocation;                                 // 0x0564(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x103];                                     // 0x0565(0x0103) MISSED OFFSET
	class AActor*                                      ClientPreHitPawn;                                         // 0x0668(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     ClientPreHitPawnLoc;                                      // 0x0670(0x000C) (IsPlainOldData)
	bool                                               bWeakNetworkOptimize;                                     // 0x067C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x067D(0x0003) MISSED OFFSET
	float                                              OptimizeEnemyMoveMaxDistance;                             // 0x0680(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeEnemyMinDistance;                                 // 0x0684(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMaxDelta;                                         // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMinPing;                                          // 0x068C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OptimizeMaxPing;                                          // 0x0690(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletLaunchVerifyDistance;                               // 0x0694(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              BlockCheckObjectTypes;                                    // 0x0698(0x0010) (Edit, ZeroConstructor)
	TWeakObjectPtr<class ASTExtraShootWeapon>          OwnerShootWeapon;                                         // 0x06A8(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawInnerCollision;                                 // 0x06B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawOuterCollision;                                 // 0x06B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x06B2(0x0002) MISSED OFFSET
	int                                                DebugSegments;                                            // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitDamage;                                                // 0x06B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreOwner;                                             // 0x06BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsIgnoreTeammate;                                        // 0x06BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x06BE(0x0002) MISSED OFFSET
	float                                              ProjectileGravityScale;                                   // 0x06C0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TotalFlyTime;                                             // 0x06C4(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bAttachToMovePlatform;                                    // 0x06C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x06C9(0x0007) MISSED OFFSET
	TMap<class AActor*, int>                           ActorImpactTimes;                                         // 0x06D0(0x0050) (ZeroConstructor)
	struct FVector                                     TargetActorLocation;                                      // 0x0720(0x000C) (Net, IsPlainOldData)
	struct FVector                                     TargetActorOffset;                                        // 0x072C(0x000C) (IsPlainOldData)
	struct FVector                                     StartFlySocketOffset;                                     // 0x0738(0x000C) (IsPlainOldData)
	struct FVector                                     LastLocation;                                             // 0x0744(0x000C) (IsPlainOldData)
	int                                                RelatedSkillID;                                           // 0x0750(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0754(0x0004) MISSED OFFSET
	struct FString                                     LuaFilePath;                                              // 0x0758(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData14[0x20];                                      // 0x0768(0x0020) MISSED OFFSET
	float                                              ProjectileDataUpdateFrequency;                            // 0x0788(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0xC];                                       // 0x078C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZProjectileBase");
		return pStaticClass;
	}


	void VerifyStartLocation();
	void UpdateServerProjectileData();
	void UpdateFollowVelocity(float InDeltaTime);
	void StartFly(const struct FVector& StartLocation, const struct FVector& InVelocity, float InGravityScale);
	void SetTargetActor(class AActor* InTargetActor);
	void RPC_Multicast_OnImpact(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale);
	struct FVector RandomRotateFlyDirection(const struct FVector& InOriginalDir, float InMinRadY, float InMaxRadY, float InMinRadZ, float InMaxRadZ);
	void PreHandleImpactOnClient(const struct FHitResult& InImpactResult);
	void OnStartFly();
	void OnRep_TargetActorLocation();
	void OnRep_TargetActor();
	void OnRep_DynamicScaleData();
	void OnProjectileExplodedOutOfTime();
	void OnProjectileDestroy();
	void OnInit();
	void OnImpact(const struct FHitResult& InImpactResult);
	void HandleRespawned();
	void HandleRecycled();
	void HandleImpactOnServer(const struct FHitResult& InImpactResult, EDBZDestroyType InDestroyType);
	void HandleImpactOnClient(const struct FVector& InImpactLocation, EDBZDestroyType InDestroyType, float inScale);
	void HandleApplyDamage(const struct FHitResult& InImpactResult, const struct FVector& InHitPoint, EDBZDestroyType InDestroyType);
	float GetWeakNetAdjustStrength(float InPing);
	class AActor* GetTheNearestActor(TArray<class AActor*> InActorList);
	class AActor* GetTargetActor();
	struct FVector GetStartVelocity();
	class ASTExtraShootWeapon* GetOwnerShootWeapon();
	float GetFlyRotationCoefficient(float InDistance);
	struct FVector FixRotateFlyDirection(const struct FVector& InOriginalDir, float InThetaX, float InThetaY);
	void DetectFollowTarget(float InDeltaTime);
	bool CheckIsOutOfRange(const struct FVector& InCheckLoc);
	bool CheckImpactInLastTrack(const struct FVector& InTraceStartLoc, const struct FVector& InTraceEndLoc);
	void CauseDamageToActor(class AActor* ImpactActor);
	void BPOnStartFly();
	void BPDealDamage();
	void AdjustStartVelocity();
};


// Class DBGame.DBZShootWeapon
// 0x0190 (0x1530 - 0x13A0)
class ADBZShootWeapon : public ASTExtraShootWeapon
{
public:
	TMap<EPawnState, struct FWeaponModifyData>         State2ModifyAttrMap2;                                     // 0x13A0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EPawnState, bool>                             EnableStateModifyAttrMap;                                 // 0x13F0(0x0050) (ZeroConstructor, Transient)
	float                                              CrossHairColorCheckDeltaTime;                             // 0x1440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckAngele;                                // 0x1444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckDistance;                              // 0x1448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorCheckDistance2;                             // 0x144C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairColorLastCheckTime;                              // 0x1450(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1454(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       LastAimTarget;                                            // 0x1458(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ASTExtraBaseCharacter*                       TargetOfLastSendAimEvent;                                 // 0x1460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfLastSendAimEvent;                                   // 0x1468(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfForceSendAimEvent;                                  // 0x146C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<struct FWeaponCrossHairPerformData>         DotCrossHairData;                                         // 0x1470(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DotCrossHairDeltaTime;                                    // 0x1480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DotCrossHairValidTime;                                    // 0x1484(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RunAimEffectFreq;                                         // 0x1488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastRunAimEffectTime;                                     // 0x148C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FWeaponCameraInfo                           RecentCameraInfo;                                         // 0x1490(0x0018) (BlueprintVisible, Net)
	bool                                               bIsAimEffectValid;                                        // 0x14A8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x14A9(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    AimEffect;                                                // 0x14B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              AimEffectLastTime;                                        // 0x14B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectAngle;                                           // 0x14BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectMaxDistance;                                     // 0x14C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectMinDistance;                                     // 0x14C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimEffectLifeTime;                                        // 0x14C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x14CC(0x0004) MISSED OFFSET
	TArray<float>                                      BurstShootIntervalArray;                                  // 0x14D0(0x0010) (BlueprintVisible, ZeroConstructor)
	EDBZBulletPreCollosionType                         BulletPreCollosionType;                                   // 0x14E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x14E1(0x0007) MISSED OFFSET
	struct FName                                       PreCollosionStartSocketName;                              // 0x14E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PreCollosionStartOffset;                                  // 0x14F0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionLength;                                       // 0x14FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PreCollosionSkillID;                                      // 0x1500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam1;                                       // 0x1504(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam2;                                       // 0x1508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreCollosionParam3;                                       // 0x150C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForbidFireWhenHandleInFold;                              // 0x1510(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x1511(0x0007) MISSED OFFSET
	struct FString                                     FireRateScaleModifyName;                                  // 0x1518(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x8];                                       // 0x1528(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.DBZShootWeapon");
		return pStaticClass;
	}


	void TickStateModifyAttr();
	void TickDrawDotCrossHairData();
	void TickAimEffect();
	void SetIsEnableScopeInFromEntity(bool Enable);
	void RefreshAimEffectActiveTime();
	void RealShootBulletWithoutParam();
	void RealShootBullet(const struct FVector& StartLoc, const struct FRotator& StartRot);
	void OnRep_RecentCameraInfo();
	void OnRep_IsAimEffectValid();
	void NotifyServerRecentCameraInfo(const struct FWeaponCameraInfo& CameraInfo);
	bool IsNeedUploadCameraInfo();
	void InserNextBurstShootInterval(float interval);
	void HandleOnRepRecentCameraInfo();
	class ASTExtraBaseCharacter* GetNearestAimTarget();
	class ASTExtraBaseCharacter* GetAimingCharacter();
	void ExitDrawDotCrossHairData();
	void EnterDrawDotCrossHairData(float DeltaTime);
	void CurBulletChangeBroadcast();
	void ConditionChangeCrossHairColor();
	void AddAimEffectActiveTime(float ExtraTime);
};


// Class DBGame.PlummetGuideActor
// 0x0098 (0x0558 - 0x04C0)
class APlummetGuideActor : public ALuaActor
{
public:
	class UMaterialInstance*                           DecalMaterialInstance;                                    // 0x04C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FadingTime;                                               // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DecalSize;                                                // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x04D0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x04DC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	class UCustomDecalComponent*                       DecalComponent;                                           // 0x04E8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       ColorName;                                                // 0x04F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                NoEnemyColor;                                             // 0x04F8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                FoundEnemyColor;                                          // 0x0508(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              TickDecalColorDelta;                                      // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLocation;                                          // 0x051C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnColorChanged;                                           // 0x0528(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0538(0x0018) MISSED OFFSET
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PlummetGuideActor");
		return pStaticClass;
	}


	void PendingDestroy();
	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.PlummetWarningActor
// 0x0088 (0x0548 - 0x04C0)
class APlummetWarningActor : public ALuaActor
{
public:
	float                                              DisappearTime;                                            // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExistsTime;                                               // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WarningSize;                                              // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	class UMaterialInstance*                           OuterMaterial;                                            // 0x04D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           InnerMaterial;                                            // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x04E0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x04EC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                TeammateColor;                                            // 0x04F8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                EnemyColor;                                               // 0x0508(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bOnlyDisplayToOwner;                                      // 0x0518(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0519(0x0003) MISSED OFFSET
	float                                              ShrinkSpeedFactor;                                        // 0x051C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0520(0x0008) MISSED OFFSET
	class UParticleSystemComponent*                    LocParticleSystem;                                        // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCustomDecalComponent*                       OuterDecalComponent;                                      // 0x0530(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCustomDecalComponent*                       InnerDecalComponent;                                      // 0x0538(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PlummetWarningActor");
		return pStaticClass;
	}


	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.PVEProjectileFollow
// 0x0098 (0x0558 - 0x04C0)
class APVEProjectileFollow : public ALuaActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET
	struct FVector                                     StartLocationForwardExtraOffset;                          // 0x04C8(0x000C) (BlueprintVisible, Net, IsPlainOldData)
	float                                              EndLocationForwardOffset;                                 // 0x04D4(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              EndLocationForwardOffsetExtra;                            // 0x04D8(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x04DC(0x0001) MISSED OFFSET
	bool                                               bLocationCorrected;                                       // 0x04DD(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     AutoCorrectRotationCollisionChannel;                      // 0x04DE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x04DF(0x0001) MISSED OFFSET
	float                                              FollowDelta;                                              // 0x04E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LocationOffsetSizeCheckSq;                                // 0x04E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoCorrectRotation;                                     // 0x04E8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHoldDestinationLocation;                                 // 0x04E9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeOwnersLook;                                      // 0x04EA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSimulateUseLocalLocation;                                // 0x04EB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeHitPoint;                                        // 0x04EC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeSimulateView;                                    // 0x04ED(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04EE(0x0002) MISSED OFFSET
	float                                              UpdateOffsetDistanceSq;                                   // 0x04F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	TArray<struct FName>                               StartLocationSockets;                                     // 0x04F8(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              RotationChangingSmoothFactor;                             // 0x0508(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkFactor;                                             // 0x050C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkSpeedUpFactor;                                      // 0x0510(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShrinkToDestroyFactor;                                    // 0x0514(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndStartPointCheckAngleMax;                               // 0x0518(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3C];                                      // 0x051C(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileFollow");
		return pStaticClass;
	}


	void SetStartLocationForwardOffset(const struct FVector& StartLocationForwardOffsetWorld);
	void RPC_Server_UpdateLocationOffset(const struct FVector_NetQuantize10& LocationOffset);
	void OnRep_LocationCorrected();
};


// Class DBGame.PVEProjectileGrenade
// 0x0000 (0x0558 - 0x0558)
class APVEProjectileGrenade : public APVEProjectileFollow
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileGrenade");
		return pStaticClass;
	}

};


// Class DBGame.PVEProjectileRay
// 0x02C8 (0x0820 - 0x0558)
class APVEProjectileRay : public APVEProjectileFollow
{
public:
	struct FRaySegmentedSoundEffect                    LoopSoundEffect;                                          // 0x0558(0x0078) (Edit, BlueprintVisible)
	struct FRaySegmentedSoundEffect                    DisappearSoundEffect;                                     // 0x05D0(0x0078) (Edit, BlueprintVisible)
	float                                              PlayersOverlapingRadius;                                  // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeInnerRadius;                                       // 0x064C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeOuterRadius;                                       // 0x0650(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeFalloff;                                           // 0x0654(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DamageTypeClass;                                          // 0x0658(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x0660(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              DamageScaleDelta;                                         // 0x0664(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDelta;                                             // 0x0668(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	TArray<float>                                      RayRadiuses;                                              // 0x0670(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	TArray<float>                                      RayRadiusesOffsetServer;                                  // 0x0680(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	float                                              RadiusScaleDelta;                                         // 0x0690(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0694(0x0004) MISSED OFFSET
	struct FString                                     EffectURL;                                                // 0x0698(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	float                                              LengthIncreasePerSecond;                                  // 0x06A8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x06AC(0x0004) MISSED OFFSET
	TArray<bool>                                       bRayCheckObstacles;                                       // 0x06B0(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	TArray<TEnumAsByte<ECollisionChannel>>             CollisionChannels;                                        // 0x06C0(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	float                                              RayHalf;                                                  // 0x06D0(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceComplex;                                            // 0x06D4(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceSimpleClient;                                       // 0x06D5(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bRayEndWhenHitted;                                        // 0x06D6(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreTeammate;                                          // 0x06D7(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoFollowOwner;                                         // 0x06D8(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugRayTrace;                                           // 0x06D9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnorePlayerHitWhenFirstHitByObstacle;                   // 0x06DA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x06DB(0x0001) MISSED OFFSET
	float                                              RayStartPosDistOffset;                                    // 0x06DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinApplyDamageRayLengthSquared;                           // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepBackDistance;                                         // 0x06E4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              ToDestroyedRadius;                                        // 0x06E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x06EC(0x0004) MISSED OFFSET
	TArray<int>                                        ExplodeHitBuffs;                                          // 0x06F0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FApplyRadialDamageMomentum                  Momentum;                                                 // 0x0700(0x0070) (BlueprintVisible)
	struct FScriptMulticastDelegate                    RayOutHitDelegate;                                        // 0x0770(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayUpdateRayWidthDelegate;                                // 0x0780(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayUpdateRayParticleDelegate;                             // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayHitEnemyDelegate;                                      // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RayOverlapEnemyDelegate;                                  // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCapsuleComponent*                           CapsuleCollision;                                         // 0x07C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                HitCount;                                                 // 0x07C8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastHitTime;                                              // 0x07CC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RayAccumulatorTimeResetThreshold;                         // 0x07D0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TickOverlapingPlayersInterval;                            // 0x07D4(0x0004) (ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DisappearCurve;                                           // 0x07D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x18];                                      // 0x07E0(0x0018) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerWeapon;                                              // 0x07F8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0800(0x0010) MISSED OFFSET
	struct FVector_NetQuantize                         RayEndPos;                                                // 0x0810(0x000C) (Net)
	unsigned char                                      UnknownData07[0x4];                                       // 0x081C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileRay");
		return pStaticClass;
	}


	void ResetHitData();
	void OnRadiusScaleDeltaChanged();
	void OnEffectURLChanged();
	class ASTExtraShootWeapon* GetOwnerShootWeapon();
	float GetElaspedTime();
	float GetDisplayRadius();
	float GetDamage();
	float GetAvgRadius();
};


// Class DBGame.PVEProjectileRaysManager
// 0x0060 (0x0520 - 0x04C0)
class APVEProjectileRaysManager : public ALuaActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x04C0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.PVEProjectileRaysManager");
		return pStaticClass;
	}


	TArray<class APVEProjectileRay*> GetRays(TEnumAsByte<ENetRole> InRole);
};


// Class DBGame.STBuffAction_RenderCustomDecal
// 0x0058 (0x00C0 - 0x0068)
class USTBuffAction_RenderCustomDecal : public USTBuffAction
{
public:
	float                                              DecalSize;                                                // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalLocationOffset;                                      // 0x006C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    DecalRotatorOffset;                                       // 0x0078(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FName                                       ColorName;                                                // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DecalColor;                                               // 0x0090(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FName                                       TickScalarName;                                           // 0x00A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TickScalarDelta;                                          // 0x00A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 DisappearCurve;                                           // 0x00B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           DecalMaterialInstance;                                    // 0x00B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_RenderCustomDecal");
		return pStaticClass;
	}


	void OnTick(float DeltaTime);
	void OnExecute();
	void OnEnd();
	class UCustomDecalComponent* CreateNewDecalComponent(const struct FName& InName, float InSize, class UMaterialInstance* InMaterial, float InExistsTime);
};


// Class DBGame.STBuffAction_ReplaceJumpAnim
// 0x0010 (0x0078 - 0x0068)
class USTBuffAction_ReplaceJumpAnim : public USTBuffAction
{
public:
	TArray<struct FSkillReplaceJumpAnimData>           AnimDataList;                                             // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_ReplaceJumpAnim");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class DBGame.STBuffAction_SetCharacterFallingMovement
// 0x0008 (0x0070 - 0x0068)
class USTBuffAction_SetCharacterFallingMovement : public USTBuffAction
{
public:
	float                                              SmoothTransferFactor;                                     // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STBuffAction_SetCharacterFallingMovement");
		return pStaticClass;
	}


	void OnTick(float DetalTime);
	void OnExecute();
	void OnEnd();
	void OnDestroy();
};


// Class DBGame.STExtraDBZAnimInstance
// 0x01D0 (0x1580 - 0x13B0)
class USTExtraDBZAnimInstance : public USTExtraAnimInstance
{
public:
	struct FName                                       FlyAttackSlotName;                                        // 0x13B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldUpdateAttackType;                                  // 0x13B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x13B9(0x0003) MISSED OFFSET
	int                                                AimOffsetBoneChainNum;                                    // 0x13BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoAimOffsetSpeedThreshold;                                // 0x13C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffsetLerpSpeed;                                       // 0x13C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Max;                                      // 0x13C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Min;                                      // 0x13CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewDeltaLerpSpeed;                                       // 0x13D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewDeltaMaxYaw;                                          // 0x13D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 SpinePitchYawMappedCurve;                                 // 0x13D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlyUpPelvisLerpSpeed;                                     // 0x13E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFlyUpPelvisOffset;                                     // 0x13E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableHeadOverlappedDetect;                              // 0x13E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x13E9(0x0003) MISSED OFFSET
	float                                              OverlappedDistance;                                       // 0x13EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     OverlapDetectOffset;                                      // 0x13F0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadOverlappedRadius;                                     // 0x13FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadOverlappedDetectInterval;                             // 0x1400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Max_Overlapped;                           // 0x1404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOffset_Pitch_Min_Overlapped;                           // 0x1408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x140C(0x0004) MISSED OFFSET
	TMap<float, float>                                 HeroSpecifiedPelvisOffset;                                // 0x1410(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DisablePelvisModifyCurveName;                             // 0x1460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EnableHandIKCurveName;                                    // 0x1468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ASTExtraDBZCharacter*                        OwnerDBZCharacter;                                        // 0x1470(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFlyState>                             CurrentFlyState;                                          // 0x1478(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAttackMontageType                                 CurrentAttackMontageType;                                 // 0x1479(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         CurrentMovementMode;                                      // 0x147A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECharacterJumpType>                    CurrentJumpType;                                          // 0x147B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving;                                                // 0x147C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               b_Flying;                                                 // 0x147D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x147E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSaving;                                                // 0x147F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFalling;                                               // 0x1480(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHardLanding;                                             // 0x1481(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldOverrideAttackAnimation;                           // 0x1482(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHeadOverlapped;                                          // 0x1483(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VelocityScale;                                            // 0x1484(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LandingHardVelocityZ;                                     // 0x1488(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              f_FlyForwarRate;                                          // 0x148C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              f_FlyRightRate;                                           // 0x1490(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch;                                          // 0x1494(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_01;                                 // 0x1498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_02;                                 // 0x149C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Spine_03;                                 // 0x14A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Pitch_Neck;                                     // 0x14A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw;                                            // 0x14A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_01;                                   // 0x14AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_02;                                   // 0x14B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Spine_03;                                   // 0x14B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimOffset_Yaw_Neck;                                       // 0x14B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PelvisOffset;                                             // 0x14BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EnablePelvisModifyCurveValue;                             // 0x14C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EnableHandIKCurveValue;                                   // 0x14C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    CurrentViewDelta;                                         // 0x14C8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    FlyUpPelvisOffset;                                        // 0x14D4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UAnimSequence*                               C_FlyUp_Sequence;                                         // 0x14E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_PrepareFlyUp;                                           // 0x14E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyUp_WindField_Sequence;                               // 0x14F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_JumpInPlace_Sequence;                                   // 0x14F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_MoveJump_Sequence;                                      // 0x1500(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyMove_Blend;                                          // 0x1508(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyHit_Blend;                                           // 0x1510(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FlyAim_Blend;                                           // 0x1518(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyDBNOBegin;                                           // 0x1520(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FlyDBNOLoop;                                            // 0x1528(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_DBNOBegin;                                              // 0x1530(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_DBNO_Blend;                                             // 0x1538(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                C_MontageDead_Fly;                                        // 0x1540(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_IdleToReadyFlyAnim;                                     // 0x1548(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_ReadyFlyingAnim;                                        // 0x1550(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           C_ReadyFlyToFlyUpAnim;                                    // 0x1558(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_FreeFallingAnim;                                        // 0x1560(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_FreeFallingTransitionAnim;                              // 0x1568(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x1570(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STExtraDBZAnimInstance");
		return pStaticClass;
	}


	void UpdateParam(float DeltaSeconds);
	void UpdateHeadOverlapped(float DeltaSeconds);
	void UpdateAttackType();
	void UpdateAnimCurve(float DeltaSeconds);
	void UpdateAimOffset(float DeltaSeconds);
	void RefreshHeroSpecifiedParam(int HeroID);
	void PlayPlayerDeadAnimation();
	void OnExitLanding();
	void LuaInitializeAnimation();
};


// Class DBGame.STExtraDBZCharacter
// 0x0160 (0x66D0 - 0x6570)
class ASTExtraDBZCharacter : public ASTExtraPlayerCharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x6570(0x0008) MISSED OFFSET
	TArray<struct FDBZHitBoxConfig>                    DBZHitBoxConfigArray;                                     // 0x6578(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DBZHitBoxHalfHeight;                                      // 0x6588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DBZHitBoxRadius;                                          // 0x658C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DBZHitBoxTickFrequency;                                   // 0x6590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DBZHitBoxTickCount;                                       // 0x6594(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UCapsuleComponent*                           DBZHitBoxComp;                                            // 0x6598(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              EquipmentDurabilityForReplay;                             // 0x65A0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x65A4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPrePushRawDamage;                                       // 0x65A8(0x0010) (ZeroConstructor, InstancedReference)
	TMap<int, class UAkAudioEvent*>                    HeroFooStepSetting;                                       // 0x65B8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              MinLandingVelocityZ;                                      // 0x6608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingHardVelocityZ;                                     // 0x660C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<EPawnState>                                 ForceJumpInPlaceStates;                                   // 0x6610(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MeleeUpMontageSlotName;                                   // 0x6620(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldHardLanding;                                       // 0x6628(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bForceHardLandingNextTime;                                // 0x6629(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ECharacterJumpType>                    CurrentJumpType;                                          // 0x662A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAttackFlag;                                              // 0x662B(0x0001) (ZeroConstructor, IsPlainOldData)
	float                                              LastLeaveAttackFlagTime;                                  // 0x662C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bCanDrawWeaponCrossHair;                                  // 0x6630(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x6631(0x0003) MISSED OFFSET
	float                                              TimeOfLastPostDrawCrossEvent;                             // 0x6634(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeOfForcePostDrawCrossEvent;                            // 0x6638(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x663C(0x0004) MISSED OFFSET
	struct FDBZHurtFlowStr                             CurDBZHurtFlow;                                           // 0x6640(0x0088)
	unsigned char                                      UnknownData04[0x8];                                       // 0x66C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.STExtraDBZCharacter");
		return pStaticClass;
	}


	void UpdateGunADSHiddenPawn();
	void ResetCharacter();
	void RefreshHeroSpecifiedParam(int NewHeroID);
	void MarkAttackFlag(bool Flag);
	bool GetShouldHardLanding();
	class ASTExtraPlayerCharacter* GetOneBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle);
	bool GetMarkAttackFlag(float RecentTime);
	TArray<struct FAimTargetInfo> GetEnemyInRange(float MaxDistance, float MaxAngle);
	float GetDBZDamageScale(class AActor* DamageCauser);
	TArray<class ASTExtraPlayerCharacter*> GetBarrierFreeEnemyInRange(float MaxDistance, float MaxAngle, int Num);
	void BroadcastClientsSimulateEquipmentDamageInfo(class ASTExtraBaseCharacter* DamageCauser, float FinalDamage, float EquipentReduce, bool brokenEquipment);
	void AddWeaponGeneralCount(int WeaponId, const struct FString& GenraString, float GeneralValue, bool Reset);
};


// Class DBGame.TailAnimInstance
// 0x0010 (0x03E0 - 0x03D0)
class UTailAnimInstance : public UAvatarDynamicAnimInstance
{
public:
	bool                                               bIsFlying;                                                // 0x03D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	float                                              f_FlyForwarRate;                                          // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              f_FlyRightRate;                                           // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.TailAnimInstance");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_CharacterRushForward
// 0x0058 (0x0110 - 0x00B8)
class UUAESkillAction_CharacterRushForward : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x00B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bStopMovementWhenHit;                                     // 0x00C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              MinMoveDistance;                                          // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStandStillTime;                                        // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x00CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAbortMovementWhenFinished;                               // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	float                                              DamageToEnemy;                                            // 0x00DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageToBuilding;                                         // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromTarget;                                    // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromBuilding;                                  // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepAwayFrom;                                            // 0x00EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRaycastObstacleFront;                                    // 0x00ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	float                                              MinDistanceToObstacle;                                    // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	TArray<struct FName>                               ObstacleDetectSockets;                                    // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0108(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_CharacterRushForward");
		return pStaticClass;
	}


	void HandleOnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class DBGame.UAESkillAction_LaunchProjectileActor
// 0x0110 (0x01C8 - 0x00B8)
class UUAESkillAction_LaunchProjectileActor : public UUAESkillAction
{
public:
	class UClass*                                      ProjectileActorTemplate;                                  // 0x00B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty DBGame.UAESkillAction_LaunchProjectileActor.SoftProjectileActorTemplate
	bool                                               bPickFromTarget;                                          // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
	class UUAESkillPicker*                             DamagePicker;                                             // 0x00F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUTSkillLocationPicker*                      LocationPicker;                                           // 0x00F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bOnlySpawnActorInServer;                                  // 0x0100(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUsingPlayerViewRotation;                               // 0x0101(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EDBZProjectileInitLocationType                     InitLocationType;                                         // 0x0102(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EDBZProjectileFlyDirectionType                     DirectionType;                                            // 0x0103(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FString                                     InitLocationBlackboardText;                               // 0x0108(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     ProjectileLineOffset;                                     // 0x0118(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     TargetActorOffset;                                        // 0x0124(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FName                                       AttachSocketName;                                         // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRay;                                                   // 0x0138(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStartflyWithoutTarget;                                   // 0x0139(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseAutoDirection;                                        // 0x013A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedWeaponAttr;                                          // 0x013B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplodeDamage;                                            // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DamageInnerRadius;                                        // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageOuterRadius;                                        // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bExplodedAtActorLocation;                                 // 0x014C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRadiusExplode;                                     // 0x014D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x014E(0x0002) MISSED OFFSET
	float                                              DelayFlyTime;                                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxLifeSpan;                                              // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedCheckMaxDistance;                                    // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsHoming;                                                // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              TurnDirectionRadSpeed;                                    // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnDirectionRadSpeedMaxScale;                            // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HomingEscapeDistance;                                     // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHomingAllDirection;                                      // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	float                                              HomingAllDirectionRadius;                                 // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRandomStartVelocity;                                   // 0x0178(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0179(0x0003) MISSED OFFSET
	float                                              MinConeHalfAngleRadY;                                     // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadY;                                     // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinConeHalfAngleRadZ;                                     // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxConeHalfAngleRadZ;                                     // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFixStartVelocity;                                        // 0x018C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	float                                              FixOffsetY;                                               // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FixOffsetZ;                                               // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ProjectileStartDirection;                                 // 0x019C(0x000C) (IsPlainOldData)
	float                                              Speed;                                                    // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCachedTargetLocation;                                 // 0x01AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
	float                                              InnerRadius;                                              // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShooterPredictionDeltaTime;                               // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BulletOriginalScale;                                      // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DynamicScaleTime;                                         // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DynamicScaleRate;                                         // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_LaunchProjectileActor");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_PlayMontageWithDBPose
// 0x00E0 (0x03C0 - 0x02E0)
class UUAESkillAction_PlayMontageWithDBPose : public UUAESkillAction_PlayMontage_Pose
{
public:
	struct FSkillPoseMontageDataDBZ                    PoseMontageDataDBZ;                                       // 0x02E0(0x00D0) (Edit)
	struct FString                                     PlayRateAdjustAttrName;                                   // 0x03B0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_PlayMontageWithDBPose");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_PlayMontageWithDBHeroPose
// 0x0050 (0x0410 - 0x03C0)
class UUAESkillAction_PlayMontageWithDBHeroPose : public UUAESkillAction_PlayMontageWithDBPose
{
public:
	TMap<int, struct FSkillPoseMontageDataDBZ>         HeroPoseMontageDataDBZ;                                   // 0x03C0(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_PlayMontageWithDBHeroPose");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_SetCameraMoveToward
// 0x0028 (0x00E0 - 0x00B8)
class UUAESkillAction_SetCameraMoveToward : public UUAESkillAction
{
public:
	class UUTSkillLocationPicker*                      LocationPicker;                                           // 0x00B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector                                     OffsetVec;                                                // 0x00C0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              LastingTime;                                              // 0x00CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultApproachSpeed;                                     // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSkipMovementIfBlocked;                                   // 0x00D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     BlockCheckChannel;                                        // 0x00D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D6(0x0002) MISSED OFFSET
	float                                              BlockCheckDistanceOffset;                                 // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_SetCameraMoveToward");
		return pStaticClass;
	}

};


// Class DBGame.UAESkillAction_SetDBMovementState
// 0x0008 (0x00C0 - 0x00B8)
class UUAESkillAction_SetDBMovementState : public UUAESkillAction
{
public:
	TEnumAsByte<EFlyState>                             FlyState;                                                 // 0x00B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UAESkillAction_SetDBMovementState");
		return pStaticClass;
	}

};


// Class DBGame.UTSkillAppearance_ParticleSystemDBZ
// 0x0010 (0x0228 - 0x0218)
class UUTSkillAppearance_ParticleSystemDBZ : public UUTSkillAppearance_ParticleSystem
{
public:
	struct FString                                     PlayRateAdjustAttrName;                                   // 0x0218(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class DBGame.UTSkillAppearance_ParticleSystemDBZ");
		return pStaticClass;
	}


	float GetPlayRateScale();
};


}

